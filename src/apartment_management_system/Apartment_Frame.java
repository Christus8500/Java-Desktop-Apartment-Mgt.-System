/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package apartment_management_system;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Christus
 */
public class Apartment_Frame extends javax.swing.JFrame {

    /**
     * Creates new form Property_Type_Frame
     */
    public Apartment_Frame() {
        initComponents();
        
        
        Border bottom_border = BorderFactory.createMatteBorder(0, 0, 1, 0, Color.BLACK);
        frame_title.setBorder(bottom_border);
        
        //Populate The Apartment Table
        fillJTableWithApartmentData();
        
        //Populate The Building Table
        fillBuildingList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        frame_title = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_aptnum = new javax.swing.JTextField();
        txt_aptsize = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        add_apartment = new javax.swing.JButton();
        update_apartment = new javax.swing.JButton();
        refresh_apt_table = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txt_apttype = new javax.swing.JTextField();
        txt_rental_fee = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txt_building_name = new javax.swing.JTextField();
        delete_apartment = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        building_table = new javax.swing.JTable();
        frame_title1 = new javax.swing.JLabel();
        refresh_building_table = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        frame_title.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        frame_title.setText("    Apartment Frame");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(461, 461, 461)
                .addComponent(frame_title, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(frame_title)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel1.setText("Apartment List ");

        jLabel2.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel2.setText("Size:");

        txt_aptnum.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txt_aptnum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_aptnumActionPerformed(evt);
            }
        });

        txt_aptsize.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txt_aptsize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_aptsizeActionPerformed(evt);
            }
        });

        jTable.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable);

        add_apartment.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        add_apartment.setText("Add Apartment");
        add_apartment.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        add_apartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_apartmentActionPerformed(evt);
            }
        });

        update_apartment.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        update_apartment.setText("Update Apartment");
        update_apartment.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        update_apartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_apartmentActionPerformed(evt);
            }
        });

        refresh_apt_table.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        refresh_apt_table.setText("Refresh Table");
        refresh_apt_table.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        refresh_apt_table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refresh_apt_tableActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel3.setText("Type: ");

        txt_apttype.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txt_apttype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_apttypeActionPerformed(evt);
            }
        });

        txt_rental_fee.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txt_rental_fee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_rental_feeActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel5.setText("Rental Fee:");

        jLabel6.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel6.setText("Building Name:");

        txt_building_name.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txt_building_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_building_nameActionPerformed(evt);
            }
        });

        delete_apartment.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        delete_apartment.setText("Delete Apartment");
        delete_apartment.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        delete_apartment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_apartmentActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        jLabel4.setText("Apartment No: ");

        building_table.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        building_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        building_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                building_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(building_table);

        frame_title1.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        frame_title1.setText("Building  List");

        refresh_building_table.setFont(new java.awt.Font("Cambria", 1, 12)); // NOI18N
        refresh_building_table.setText("Refresh Table");
        refresh_building_table.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        refresh_building_table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refresh_building_tableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(10, 10, 10)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txt_aptsize, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txt_aptnum)
                            .addComponent(txt_apttype, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel5)
                                .addComponent(jLabel6))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txt_building_name)
                                .addComponent(txt_rental_fee)))
                        .addComponent(delete_apartment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(add_apartment, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(update_apartment))))
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(refresh_apt_table, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(frame_title1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(refresh_building_table, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(29, 29, 29))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(frame_title1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel1)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(txt_aptnum, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txt_aptsize, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txt_apttype, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txt_rental_fee, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txt_building_name, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(29, 29, 29)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(add_apartment, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(update_apartment, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addComponent(delete_apartment, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(refresh_apt_table, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refresh_building_table, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(98, 98, 98))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Define a method to clear text fields
    private void clearTextFields() {
        txt_aptnum.setText("");
        txt_aptsize.setText("");
        txt_apttype.setText("");
        txt_rental_fee.setText("");
        txt_building_name.setText("");
    }
    
    //Method To Populate The JTable With The Apartment Data Using The Arraylist We Created In Our Apartment_Class
    //And Also To Fill The Form With The Selected Apartment's Data
    public void fillJTableWithApartmentData(){
        Apartment_Class apartment = new Apartment_Class();
        ArrayList<Apartment_Class> apartmentList = apartment.apartmentList();
        
        //JTable Columns
        String[] colNames = {"Apartment No", "Apartment Size", "Apartment Type", "Rental Fee", "Building Name"};
        
        //JTable Rows
        //apartmentList.size() = size of the arraylist
        //7 = the number of columns
        Object[][] rows = new Object[apartmentList.size()][5];
        
        //add data from the list to the rows
        for(int i = 0; i < apartmentList.size(); i++){
            rows[i][0] = apartmentList.get(i).getAptNum();
            rows[i][1] = apartmentList.get(i).getAptSize();
            rows[i][2] = apartmentList.get(i).getAptType();
            rows[i][3] = apartmentList.get(i).getRentalFee();
            rows[i][4] = apartmentList.get(i).getBName();
            
            DefaultTableModel model = new DefaultTableModel(rows, colNames);
            jTable.setModel(model);
            
            jTable.getColumnModel().getColumn(3).setPreferredWidth(50);//Set A Preferred Width For The RentalFee Column
             
        }
        
    }
    
    //Method To Populate The JList Using The Arraylist in our Building_Class
    public void fillBuildingList(){
        Building_Class building = new Building_Class();
        ArrayList<Building_Class> buildingList = building.buildingList();
        
        //JTable Columns
        String[] colNames = {"Building Name", "Address"};
        
        //JTable Rows
        //buildingList.size() = size of the arraylist
        //2 = the number of columns
        Object[][] rows = new Object[buildingList.size()][2];
        
        //add data from the list to the rows
        for(int i = 0; i < buildingList.size(); i++){
            rows[i][0] = buildingList.get(i).getBuildingName();
            rows[i][1] = buildingList.get(i).getAddress();
            
            DefaultTableModel model = new DefaultTableModel(rows, colNames);
            building_table.setModel(model);
            
        }
        
    }
    
    //Function To Check If The Building Name Exists
    private boolean checkBuildingExists(String buildingName) {
        try {
            String query = "SELECT COUNT(*) FROM `building` WHERE `buildingName` = ?";
            PreparedStatement ps = Db_Connect.Connect().prepareStatement(query);
            ps.setString(1, buildingName);
            ResultSet rs = ps.executeQuery();

            rs.next();
            int count = rs.getInt(1);

            return count > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the database error here
            return false;
        }
    }
    
    private void txt_aptnumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_aptnumActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_aptnumActionPerformed

    private void txt_aptsizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_aptsizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_aptsizeActionPerformed

    private void update_apartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_apartmentActionPerformed
        // TODO add your handling code here:
        //UPDATE APARTMENT
        String idText = txt_aptnum.getText();
        if (!idText.isBlank() && idText.matches("\\d+")) {
            try {
                int apt_num = Integer.parseInt(idText);
                String apt_size = txt_aptsize.getText();
                String apt_type = txt_apttype.getText();
                String rental_fee = txt_rental_fee.getText();
                String building_name = txt_building_name.getText();

                if (!apt_size.isBlank() && !apt_type.isBlank() && !rental_fee.isBlank() && !building_name.isBlank()) {
                    if (checkBuildingExists(building_name)){
                        Apartment_Class type = new Apartment_Class(apt_num, apt_size, apt_type, rental_fee, building_name);

                        if (type.executeQueryType("edit", type)) {
                            JOptionPane.showMessageDialog(null, "Apartment Updated Successfully", "Edit Apartment", 1);
                        } else {
                            JOptionPane.showMessageDialog(null, "Try Again, Operation Failed", "Edit Apartment", 2);
                        }
                        // Clear the text fields in any case (whether the edit operation succeeds or not).
                        clearTextFields();
                    }else{
                        JOptionPane.showMessageDialog(null, "Enter The Correct Building Name; Check The Building Frame For A List Of Available Building", "C Not Found", 2);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "All Fields Must Not Be Empty", "Empty Field", 2);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid ID. Please enter a valid number for the ID.", "Invalid ID", 2);
            }
        } else {
            JOptionPane.showMessageDialog(null, "All Fields Must Be Filled", "Empty Field", 2);
        }
        

    }//GEN-LAST:event_update_apartmentActionPerformed

    private void add_apartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_apartmentActionPerformed
        // TODO add your handling code here:
        //ADD APARTMENT
        String idText = txt_aptnum.getText();
        if (!idText.isBlank() && idText.matches("\\d+")) {
            try {
                int apt_num = Integer.parseInt(idText);
                String apt_size = txt_aptsize.getText();
                String apt_type = txt_apttype.getText();
                String rental_fee = txt_rental_fee.getText();
                String building_name = txt_building_name.getText();
                

                if (!building_name.isBlank() && !apt_size.isBlank() && !apt_type.isBlank() && !rental_fee.isBlank()) {
                    if (checkBuildingExists(building_name)){
                        Apartment_Class type = new Apartment_Class(apt_num, apt_size, apt_type, rental_fee, building_name);

                        if (type.executeQueryType("add", type)) {
                            JOptionPane.showMessageDialog(null, "Apartment Added Successfully", "Add Apartment", 1);
                            clearTextFields();
                        } else {
                            JOptionPane.showMessageDialog(null, "Try Again, Operation Failed", "Add Apartment", 2);
                        }
                        
                    }else{
                        JOptionPane.showMessageDialog(null, "Enter The Correct Building Name; Check The Building Table For A List Of Available Building", "C Not Found", 2);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "All Fields Must Be Filled", "Empty Field", 2);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid ID. Please enter a valid number for the ID.", "Invalid ID", 2);
            }
        } else {
            JOptionPane.showMessageDialog(null, "All Fields Must Be Filled", "Empty Field", 2);
        }
    }//GEN-LAST:event_add_apartmentActionPerformed

    private void txt_apttypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_apttypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_apttypeActionPerformed

    private void txt_rental_feeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_rental_feeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_rental_feeActionPerformed

    private void txt_building_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_building_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_building_nameActionPerformed

    private void delete_apartmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_apartmentActionPerformed
        // TODO add your handling code here:
        //DELETE APARTMENT
        String idText = txt_aptnum.getText();
        if (!idText.isBlank() && idText.matches("\\d+")) {
            int apt_num = Integer.parseInt(idText);
            Apartment_Class type = new Apartment_Class(apt_num, "", "", "", "");

            int confirm = JOptionPane.showConfirmDialog(null, "Confirm Remove?", "Remove Apartment", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                if (type.executeQueryType("remove", type)) {
                    JOptionPane.showMessageDialog(null, "Apartment Removed Successfully", "Remove Apartment", 1);
                } else {
                    JOptionPane.showMessageDialog(null, "Try Again, Operation Failed, Check If The Apartment No is Correct", "Remove Apartment", 2);
                }
            }
            // Clear the text fields using the clearTextFields method
            clearTextFields();
        } else {
            JOptionPane.showMessageDialog(null, "Enter a Valid ID to Delete", "Invalid Input", 2);
        }
        
    }//GEN-LAST:event_delete_apartmentActionPerformed

    private void jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseClicked
        // TODO add your handling code here:
        //Fill The Form With The Selected Apartment Data
        int selectedRowIndex = jTable.getSelectedRow();
        txt_aptnum.setText(jTable.getValueAt(selectedRowIndex, 0).toString());
        txt_aptsize.setText(jTable.getValueAt(selectedRowIndex, 1).toString());
        txt_apttype.setText(jTable.getValueAt(selectedRowIndex, 2).toString());
        txt_rental_fee.setText(jTable.getValueAt(selectedRowIndex, 3).toString());
        txt_building_name.setText(jTable.getValueAt(selectedRowIndex, 4).toString());
    }//GEN-LAST:event_jTableMouseClicked

    private void refresh_apt_tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refresh_apt_tableActionPerformed
        // TODO add your handling code here:
        fillJTableWithApartmentData();
    }//GEN-LAST:event_refresh_apt_tableActionPerformed

    private void building_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_building_tableMouseClicked
        // TODO add your handling code here:
        //Fill The Form Fields With The Selected Building Data
        int selectedRowIndex = building_table.getSelectedRow();
        txt_building_name.setText(building_table.getValueAt(selectedRowIndex, 0).toString());
    }//GEN-LAST:event_building_tableMouseClicked

    private void refresh_building_tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refresh_building_tableActionPerformed
        // TODO add your handling code here:
        fillBuildingList();
    }//GEN-LAST:event_refresh_building_tableActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Apartment_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Apartment_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Apartment_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Apartment_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Apartment_Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_apartment;
    private javax.swing.JTable building_table;
    private javax.swing.JButton delete_apartment;
    private javax.swing.JLabel frame_title;
    private javax.swing.JLabel frame_title1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable;
    private javax.swing.JButton refresh_apt_table;
    private javax.swing.JButton refresh_building_table;
    private javax.swing.JTextField txt_aptnum;
    private javax.swing.JTextField txt_aptsize;
    private javax.swing.JTextField txt_apttype;
    private javax.swing.JTextField txt_building_name;
    private javax.swing.JTextField txt_rental_fee;
    private javax.swing.JButton update_apartment;
    // End of variables declaration//GEN-END:variables
}
