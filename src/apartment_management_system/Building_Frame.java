/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package apartment_management_system;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Christus
 */
public class Building_Frame extends javax.swing.JFrame {

    /**
     * Creates new form Property_Type_Frame
     */
    public Building_Frame() {
        initComponents();
        
        
        Border bottom_border = BorderFactory.createMatteBorder(0, 0, 1, 0, Color.BLACK);
        frame_title.setBorder(bottom_border);
        
        //Populate The Building Table
        fillBuildingList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        frame_title = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txt_landlord_id = new javax.swing.JTextField();
        txt_building_name = new javax.swing.JTextField();
        add_buliding = new javax.swing.JButton();
        update_buliding = new javax.swing.JButton();
        refresh_table = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txt_address = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        delete_buliding = new javax.swing.JButton();
        txt_zipcode = new javax.swing.JTextField();
        frame_title1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        building_table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        frame_title.setFont(new java.awt.Font("Cambria", 1, 20)); // NOI18N
        frame_title.setText("     Building  Frame");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(371, 371, 371)
                .addComponent(frame_title, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(frame_title, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Cambria", 0, 16)); // NOI18N
        jLabel1.setText("Lanlord Id: ");

        jLabel2.setFont(new java.awt.Font("Cambria", 0, 16)); // NOI18N
        jLabel2.setText("Building Name");

        txt_landlord_id.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txt_landlord_id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_landlord_idActionPerformed(evt);
            }
        });

        txt_building_name.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txt_building_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_building_nameActionPerformed(evt);
            }
        });

        add_buliding.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        add_buliding.setText("Add Building");
        add_buliding.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        add_buliding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_bulidingActionPerformed(evt);
            }
        });

        update_buliding.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        update_buliding.setText("Update Building");
        update_buliding.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        update_buliding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_bulidingActionPerformed(evt);
            }
        });

        refresh_table.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        refresh_table.setText("Refresh Table");
        refresh_table.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refresh_tableActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Cambria", 0, 16)); // NOI18N
        jLabel3.setText("Address");

        txt_address.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txt_address.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_addressActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Cambria", 0, 16)); // NOI18N
        jLabel4.setText("Zip Code");

        delete_buliding.setFont(new java.awt.Font("Cambria", 1, 14)); // NOI18N
        delete_buliding.setText("Delete Building");
        delete_buliding.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        delete_buliding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delete_bulidingActionPerformed(evt);
            }
        });

        txt_zipcode.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        txt_zipcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_zipcodeActionPerformed(evt);
            }
        });

        frame_title1.setFont(new java.awt.Font("Cambria", 1, 15)); // NOI18N
        frame_title1.setText("Building  List");

        building_table.setFont(new java.awt.Font("Cambria", 0, 12)); // NOI18N
        building_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        building_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                building_tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(building_table);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(add_buliding, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(update_buliding, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(delete_buliding, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refresh_table, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_landlord_id, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_building_name, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_address, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_zipcode, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(frame_title1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(frame_title1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(add_buliding, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(update_buliding, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(delete_buliding, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(refresh_table, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(66, 66, 66))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txt_landlord_id)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txt_building_name, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txt_address, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txt_zipcode, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // Define a method to clear text fields
    private void clearTextFields() {
        txt_landlord_id.setText("");
        txt_building_name.setText("");
        txt_address.setText("");
        txt_zipcode.setText("");
    }
    
    //Function To Check If The Building Name Exists
    private boolean checkBuildingExists(String buildingName) {
        try {
            String query = "SELECT COUNT(*) FROM `building` WHERE `buildingName` = ?";
            PreparedStatement ps = Db_Connect.Connect().prepareStatement(query);
            ps.setString(1, buildingName);
            ResultSet rs = ps.executeQuery();

            rs.next();
            int count = rs.getInt(1);

            return count > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the database error here
            return false;
        }
    }
    
    //Method To Populate The JList Using The Arraylist in our Building_Class
    public void fillBuildingList(){
        Building_Class building = new Building_Class();
        ArrayList<Building_Class> buildingList = building.buildingList();
        
        //JTable Columns
        String[] colNames = {"LandLord ID", "Building Name", "Address", "ZipCode"};
        
        //JTable Rows
        //buildingList.size() = size of the arraylist
        //4 = the number of columns
        Object[][] rows = new Object[buildingList.size()][4];
        
        //add data from the list to the rows
        for(int i = 0; i < buildingList.size(); i++){
            rows[i][0] = buildingList.get(i).getLandlord_Id();
            rows[i][1] = buildingList.get(i).getBuildingName();
            rows[i][2] = buildingList.get(i).getAddress();
            rows[i][3] = buildingList.get(i).getZipcode();
            
            DefaultTableModel model = new DefaultTableModel(rows, colNames);
            building_table.setModel(model);
            
        }
        
    }
    
    private void txt_landlord_idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_landlord_idActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_landlord_idActionPerformed

    private void txt_building_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_building_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_building_nameActionPerformed

    private void update_bulidingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_bulidingActionPerformed
        // TODO add your handling code here:
        //UPDATE BUILDING
        String idText = txt_landlord_id.getText();
        if (!idText.isBlank() && idText.matches("\\d+")) {
            try {
                int landlord_id = Integer.parseInt(idText);
                String building_name = txt_building_name.getText();
                String address = txt_address.getText();
                String zipcode = txt_zipcode.getText();

                if (!building_name.isBlank() && !address.isBlank() && !zipcode.isBlank()) {
                    // Check if the building exists in the database
                    if (checkBuildingExists(building_name)) {
                        Building_Class type = new Building_Class(landlord_id, building_name, address, zipcode);

                        if (type.executeQueryType("edit", type)) {
                            JOptionPane.showMessageDialog(null, "Building Updated Successfully", "Edit Building", 1);
                        } else {
                            JOptionPane.showMessageDialog(null, "Try Again, Operation Failed", "Edit Building", 2);
                        }
                        // Clear the text fields in any case (whether the edit operation succeeds or not).
                        clearTextFields();
                    } else {
                        JOptionPane.showMessageDialog(null, "Building not found in the database. Please check the Building Name.", "Building Not Found", 2);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Enter the Building Name You Wish to Update and Fill All Fields", "Empty Field", 2);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid ID. Please enter a valid number for the ID.", "Invalid ID", 2);
            }
        } else {
            JOptionPane.showMessageDialog(null, "All Fields Must Be Filed", "Empty Field", 2);
        }
        // Clear the text fields in any case (whether the edit operation succeeds or not).
        clearTextFields();


    }//GEN-LAST:event_update_bulidingActionPerformed

    private void add_bulidingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_bulidingActionPerformed
        // TODO add your handling code here:
        //ADD BUILDING
        String idText = txt_landlord_id.getText();
        if (!idText.isBlank() && idText.matches("\\d+")) {
            try {
                int landlord_id = Integer.parseInt(idText);
                String building_name = txt_building_name.getText();
                String address = txt_address.getText();
                String zipcode = txt_zipcode.getText();

                if (!building_name.isBlank() && !address.isBlank() && !zipcode.isBlank()) {
                    Building_Class type = new Building_Class(landlord_id, building_name, address, zipcode);

                    if (type.executeQueryType("add", type)) {
                        JOptionPane.showMessageDialog(null, "Building Added Successfully", "Add Building", 1);
                    } else {
                        JOptionPane.showMessageDialog(null, "Try Again, Operation Failed", "Add Building", 2);
                    }
                    // Clear the text fields in any case (whether the edit operation succeeds or not).
                    clearTextFields();
                } else {
                    JOptionPane.showMessageDialog(null, "All Fields Must Be Filled", "Empty Field", 2);
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Invalid ID. Please enter a valid number for the ID.", "Invalid ID", 2);
            }
        } else {
            JOptionPane.showMessageDialog(null, "All Fields Must Be Filled", "Empty Field", 2);
        }
        // Clear the text fields in any case (whether the edit operation succeeds or not).
        clearTextFields();        
    }//GEN-LAST:event_add_bulidingActionPerformed

    private void txt_addressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_addressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_addressActionPerformed

    private void delete_bulidingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delete_bulidingActionPerformed
        // TODO add your handling code here:
        //DELETE BUILDING
        String building_name = txt_building_name.getText();
        if (!building_name.isBlank() || checkBuildingExists(building_name)) {
            Building_Class building = new Building_Class(0, building_name, "", "");

            int confirm = JOptionPane.showConfirmDialog(null, "Confirm Remove?", "Remove Buliding", JOptionPane.YES_NO_OPTION);

            if (confirm == JOptionPane.YES_OPTION) {
                if (building.executeQueryType("remove", building)) {
                    JOptionPane.showMessageDialog(null, "Buliding Removed Successfully", "Remove Buliding", 1);
                } else {
                    JOptionPane.showMessageDialog(null, "Try Again, Operation Failed", "Remove Buliding", 2);
                }
            }
            // Clear the text fields using the clearTextFields method
            clearTextFields();
        } else {
            JOptionPane.showMessageDialog(null, "Enter a Valid Buliding Name to Delete", "Invalid Input", 2);
        }
        
    }//GEN-LAST:event_delete_bulidingActionPerformed

    private void txt_zipcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_zipcodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_zipcodeActionPerformed

    private void refresh_tableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refresh_tableActionPerformed
        // TODO add your handling code here:
        fillBuildingList();
    }//GEN-LAST:event_refresh_tableActionPerformed

    private void building_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_building_tableMouseClicked
        // TODO add your handling code here:
        //Fill The Form Fields With The Selected Building Data
        int selectedRowIndex = building_table.getSelectedRow();
        txt_landlord_id.setText(building_table.getValueAt(selectedRowIndex, 0).toString());
        txt_building_name.setText(building_table.getValueAt(selectedRowIndex, 1).toString());
        txt_address.setText(building_table.getValueAt(selectedRowIndex, 2).toString());
        txt_zipcode.setText(building_table.getValueAt(selectedRowIndex, 3).toString());
    }//GEN-LAST:event_building_tableMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Building_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Building_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Building_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Building_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Building_Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add_buliding;
    private javax.swing.JTable building_table;
    private javax.swing.JButton delete_buliding;
    private javax.swing.JLabel frame_title;
    private javax.swing.JLabel frame_title1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton refresh_table;
    private javax.swing.JTextField txt_address;
    private javax.swing.JTextField txt_building_name;
    private javax.swing.JTextField txt_landlord_id;
    private javax.swing.JTextField txt_zipcode;
    private javax.swing.JButton update_buliding;
    // End of variables declaration//GEN-END:variables
}
